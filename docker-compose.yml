---
version: "3.4"
services:
###############################################################
# Postgres - Shared
###############################################################
  postgresql:
    image: postgres:16.4-bullseye
    container_name: postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - docker_postgres16:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
    env_file:
      - env.env
    networks:
      - reverse_proxy


###############################################################
# Authentik 
###############################################################
  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik_redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - docker_authentikredis:/data
    networks:
      - reverse_proxy

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.0}
    container_name: authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    ports:
      - "${COMPOSE_PORT_HTTP:-9080}:9000"
      - "${COMPOSE_PORT_HTTPS:-9090}:9443"
    networks:
      reverse_proxy:
        ipv4_address: 172.26.0.100
    env_file:
      - env.env
    depends_on:
      - postgresql
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`authentik.willg.link`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.authentik-outpost.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.willg.link`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-outpost.tls=true"
      - "traefik.http.routers.authentik-outpost.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.authentik.service=authentik-svc"
      - "traefik.http.services.authentik-svc.loadBalancer.server.port=9000"

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.0}
    container_name: authentik_worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    env_file:
      - env.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates

    depends_on:
      - postgresql
      - redis
    networks:
      - reverse_proxy


###############################################################
# Dashy
###############################################################

  dashy:
    image: lissy93/dashy
    container_name: dashy
    volumes:
      - /container_data/dashy/dashy-conf.yml:/app/user-data/conf.yml
    ports:
      - 8090:8080
    networks:
      - reverse_proxy    
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashy.tls=true"
      - "traefik.http.routers.dashy.entrypoints=websecure"
      - "traefik.http.routers.dashy.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.dashy.rule=Host(`home.willg.link`)"
      - "traefik.http.routers.dashy.middlewares=middlewares-authentik@docker"

###############################################################
# Media Stack
###############################################################

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=NZ
    volumes:
      - sabnzbdconfig:/config
      - downloads:/downloads 
    ports:
      - 8079:8079
    networks:
      - reverse_proxy
    restart: unless-stopped

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=NZ 
    volumes:
      - sonarrconfig:/config 
      - tv:/TV 
      - downloads:/downloads 
    ports:
      - 8989:8989
    networks:
      - reverse_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.willg.link`)"
      - "traefik.http.routers.sonarr.middlewares=middlewares-authentik@docker"
      - "traefik.http.routers.sonarr.service=sonarr-docker"
  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=NZ 
    volumes:
      - radarrconfig:/config 
      - movies:/Movies 
      - downloads:/downloads 
    ports:
      - 7878:7878
    networks:
      - reverse_proxy

  plex:
    container_name: plex
    image: plexinc/pms-docker:latest
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=NZ 
    volumes:
      - plexconfig:/config 
      - plexconfig:/transcode 
      - tv:/tv 
      - movies:/movies 
    ports:
      -  32400:32400 
      -  5353:5353/udp 
      -  8324:8324 
      -  32410:32410/udp 
      -  32412:32412/udp 
      -  32413:32413/udp 
      -  32414:32414/udp 
      -  32469:32469
    networks:
      - reverse_proxy

###############################################################
# Portainer
###############################################################
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9443:9443"
      - "9000:9000"
    networks:
      - reverse_proxy    
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.portainer.rule=Host(`portainer.willg.link`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

###############################################################
# Traefik
###############################################################

  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command:
      - --entrypoints.web.address=:80
      - --api
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAINNAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAINNAME}
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false 
      - --certificatesresolvers.letsencryptresolver.acme.dnschallenge=true
      - --certificatesresolvers.letsencryptresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencryptresolver.acme.email=${EMAIL}
      - --certificatesresolvers.letsencryptresolver.acme.storage=/acme.json
      - --log.level=info
      - --providers.file.filename=/dynamic.yml
    ports:
      - 80:80
      - 443:443
    networks:
      - reverse_proxy
    environment:
      - CF_API_EMAIL=${EMAIL}
      - CF_API_KEY=${KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro 
      - ${TRAEFIK_DIR}/acme.json:/acme.json 
      - /container_data/traefik/dynamic.yml:/dynamic.yml:ro
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.admin.basicauth.users=${HTTP_BASIC_USER}:${HTTP_BASIC_PWD}
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`${DOMAINNAME}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=middlewares-authentik@docker
      - traefik.http.routers.traefik.tls.certresolver=letsencryptresolver
      - traefik.http.middlewares.middlewares-authentik.forwardAuth.address=http://172.26.0.100:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.middlewares-authentik.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.middlewares-authentik.forwardAuth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version


###############################################################
# Jenkins
###############################################################

  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8100:8080
      - 50000:50000
    networks:
      - reverse_proxy
    dns:
      - 192.168.90.100
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.tls=true"
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - "traefik.http.routers.jenkins.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.willg.link`)"
      #-  "traefik.http.routers.jenkins.middlewares=middlewares-authentik@docker"

###############################################################
# Duplicati
###############################################################
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=NZ
      - CLI_ARGS= #optional
      - DOCKER_MODS=linuxserver/mods:code-server-docker
    volumes:
      - duplicati_data:/config
      - local_backup:/backups
      - docker_data:/source
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    ports:
      - 8200:8200
    networks:
      - reverse_proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backup.tls=true"
      - "traefik.http.routers.backup.entrypoints=websecure"
      - "traefik.http.routers.backup.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.backup.rule=Host(`backup.willg.link`)"
      
###############################################################
# UpTimeKuma
###############################################################    
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - uptimekuma_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock 
    ports:
      - 3001:3001  
    networks:
      - reverse_proxy 
    restart: always  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptimekuma.tls=true"
      - "traefik.http.routers.uptimekuma.entrypoints=websecure"
      - "traefik.http.routers.uptimekuma.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.uptimekuma.rule=Host(`status.willg.link`)"
      
      
      
      
###############################################################
# Actual Budget
###############################################################
  actual-development:
    container_name: Actual_Budget
    image: docker.io/actualbudget/actual-server:latest

    networks:
      - reverse_proxy 
    ports:
      - '5006:5006'
    volumes:
      - actualbudget_data:/data
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.actualbudget.tls=true"
      - "traefik.http.routers.actualbudget.entrypoints=websecure"
      - "traefik.http.routers.actualbudget.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.actualbudget.rule=Host(`budget.willg.link`)"
    

###############################################################
# Tandoor
###############################################################
  tandoor:
    image: vabene1111/recipes
    container_name: tandoor
    restart: unless-stopped
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=tandoor
      - POSTGRES_USER=tandoor
      - POSTGRES_PASSWORD=${TANDOOR_DB_PASSWORD}
      - SECRET_KEY=${TANDOOR_SECRET_KEY}
      - ALLOWED_HOSTS=*
    volumes:
      - /tandoor_data/mediafiles:/opt/recipes/mediafiles
      - /tandoor_data/staticfiles:/opt/recipes/staticfiles
    networks:
      - reverse_proxy
    depends_on:
      - postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tandoor.rule=Host(`recipes.willg.link`)"
      - "traefik.http.routers.tandoor.entrypoints=websecure"
      - "traefik.http.routers.tandoor.tls=true"
      - "traefik.http.routers.tandoor.tls.certresolver=letsencryptresolver"

###############################################################
# Paperless
###############################################################
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless
    ports:
      - 8000:8000
    volumes:
      - /paperless_data:/usr/src/paperless/data
      - /paperless_media:/usr/src/paperless/media
      - /paperless_export:/usr/src/paperless/export
      - /paperless_consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_URL: https://docs.willg.link
      PAPERLESS_TIME_ZONE: Pacific/Auckland
      PAPERLESS_OCR_LANGUAGE: eng
      PAPERLESS_ADMIN_USER: admin
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
      PAPERLESS_DBHOST: postgres
      PAPERLESS_DBPORT: 5432
      PAPERLESS_DBNAME: paperless
      PAPERLESS_DBUSER: paperless
      PAPERLESS_DBPASS: ${PAPERLESS_DB_PASSWORD}
      PAPERLESS_REDIS: redis://authentik_redis:6379
    restart: unless-stopped
    depends_on:
      - postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.rule=Host(`docs.willg.link`)"
      - "traefik.http.routers.paperless.entrypoints=websecure"
      - "traefik.http.routers.paperless.tls=true"
      - "traefik.http.routers.paperless.tls.certresolver=letsencryptresolver"
    networks:
      - reverse_proxy

###############################################################
# Volumes
#################################################################

volumes:
  duplicati_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/duplicati'

  paperless_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/paperless/data'

  paperless_media:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/paperless/media'

  paperless_export:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/paperless/export'

  paperless_consume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/paperless/consume'

  tandoor_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/tandoor'

  actualbudget_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/actualbudget'

  uptimekuma_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/uptimekuma'

  local_backup:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/will/backup'

  docker_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data'

  docker_postgres16:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/postgres16'

  docker_authentikredis:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/authentik/redis'

  downloads:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/media/Downloads'

  tv:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/media/TV'

  movies:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/media/Movies'
  
  plexconfig:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/media/plex'

  sonarrconfig:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/media/sonarr'

  radarrconfig:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/media/radarr'

  sabnzbdconfig:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/media/sabnzbd'

  jenkins-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/jenkins'

  portainer_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/container_data/portainer'




###############################################################
# Networks
###############################################################
networks:
  reverse_proxy:
    external: true